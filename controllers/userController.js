const User = require('../models/User')
const asyncHandler = require('express-async-handler');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const path = require('path');
const fs = require('fs');

const generateToken = (id) => {
    return jwt.sign({ id }, process.env.JWT_SECRET || 'fallback-secret', { expiresIn: '30d' });
};


const getAllUsers = asyncHandler(async(req,res)=>{
    const users = await User.find().select('-password').lean()
    if(!users?.length){
        return res.status(400).json({message:"No users found"})
    }
    res.json(users)
})

// Get user by ID
const getUserById = asyncHandler(async (req, res) => {
  const user = await User.findById(req.params.id).select('-password');
  if (!user) {
    res.status(404);
    throw new Error('User not found');
  }
  res.json({ 
    user: {
      ...user.toObject(),
      profile_picture: user.profile_picture
    }
  });
});

// Login User
const loginUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    res.status(400);
    throw new Error('Please add email and password');
  }

  const user = await User.findOne({ email });

  if (user && (await bcrypt.compare(password, user.password))) {
    res.json({
      _id: user._id,
      user_id: user.user_id, // Include user_id in response
      username: user.username,
      name: user.name,
      email: user.email,
      profile_picture: user.profile_picture,
      token: generateToken(user._id),
      business_profile: user.business_profile,
      subscription: user.subscription
    });
  } else {
    res.status(400);
    throw new Error('Invalid credentials');
  }
});


const createUser = asyncHandler(async (req, res) => {
  const { username, email, password, name, business_type, marketing_goal, target_audience } = req.body;

  if (!username || !email || !password || !name) {
      res.status(400);
      throw new Error('Please add all required fields: username, email, password, name');
  }

  const userExists = await User.findOne({ $or: [{ email }, { username }] });
  if (userExists) {
      res.status(400);
      throw new Error('User already exists with this email or username');
  }

  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(password, salt);

  // Handle profile picture if uploaded
  let profilePicturePath = null;
  if (req.file) {
    profilePicturePath = `/uploads/profile-pictures/${req.file.filename}`;
  }

  // user_id will be automatically generated by the schema
  const user = await User.create({
      username,
      email,
      password: hashedPassword,
      name,
      profile_picture: profilePicturePath,
      business_profile: {
          industry: business_type || 'other',
          target_audience: target_audience || [],
          marketing_goals: marketing_goal ? [marketing_goal] : ['brand_awareness']
      }
  });

  if (user) {
      const token = generateToken(user._id);
      res.status(201).json({
          _id: user._id,
          user_id: user.user_id, // Include the auto-generated user_id
          username: user.username,
          name: user.name,
          email: user.email,
          profile_picture: user.profile_picture,
          token,
          business_profile: user.business_profile,
          subscription: user.subscription,
          usage_metrics: user.usage_metrics
      });
  } else {
      res.status(400);
      throw new Error('Invalid user data');
  }
});

// Update User
const updateUser = asyncHandler(async (req, res) => {
  const updates = { ...req.body };
  
  // Remove sensitive fields
  delete updates.password;
  delete updates._id;
  delete updates.user_id; // Prevent user_id from being changed

  // Handle profile picture upload
  if (req.file) {
    // Get current user to delete old profile picture if exists
    const currentUser = await User.findById(req.params.id);
    if (currentUser && currentUser.profile_picture) {
      const oldFilePath = path.join(__dirname, '..', 'public', currentUser.profile_picture);
      // Delete old file if it exists
      if (fs.existsSync(oldFilePath)) {
        try {
          fs.unlinkSync(oldFilePath);
        } catch (err) {
          console.error('Error deleting old profile picture:', err);
        }
      }
    }
    // Set new profile picture path
    updates.profile_picture = `/uploads/profile-pictures/${req.file.filename}`;
  }

  const updatedUser = await User.findByIdAndUpdate(
    req.params.id,
    { $set: updates },
    { new: true, runValidators: true }
  ).select('-password');

  if (!updatedUser) {
    res.status(404);
    throw new Error('User not found');
  }

  res.json({
    message: 'User updated successfully',
    user: updatedUser
  });
});

// Upload/Update Profile Picture
const uploadProfilePicture = asyncHandler(async (req, res) => {
  if (!req.file) {
    res.status(400);
    throw new Error('No file uploaded. Please provide a profile picture.');
  }

  const user = await User.findById(req.params.id);
  if (!user) {
    res.status(404);
    throw new Error('User not found');
  }

  // Delete old profile picture if exists
  if (user.profile_picture) {
    const oldFilePath = path.join(__dirname, '..', 'public', user.profile_picture);
    if (fs.existsSync(oldFilePath)) {
      try {
        fs.unlinkSync(oldFilePath);
      } catch (err) {
        console.error('Error deleting old profile picture:', err);
      }
    }
  }

  // Update user with new profile picture path
  const profilePicturePath = `/uploads/profile-pictures/${req.file.filename}`;
  user.profile_picture = profilePicturePath;
  await user.save();

  res.json({
    message: 'Profile picture uploaded successfully',
    profile_picture: user.profile_picture,
    user: {
      _id: user._id,
      username: user.username,
      name: user.name,
      email: user.email,
      profile_picture: user.profile_picture
    }
  });
});

// Delete Profile Picture
const deleteProfilePicture = asyncHandler(async (req, res) => {
  const user = await User.findById(req.params.id);
  if (!user) {
    res.status(404);
    throw new Error('User not found');
  }

  if (!user.profile_picture) {
    res.status(400);
    throw new Error('User does not have a profile picture');
  }

  // Delete file from filesystem
  const filePath = path.join(__dirname, '..', 'public', user.profile_picture);
  if (fs.existsSync(filePath)) {
    try {
      fs.unlinkSync(filePath);
    } catch (err) {
      console.error('Error deleting profile picture:', err);
    }
  }

  // Remove profile picture from user
  user.profile_picture = null;
  await user.save();

  res.json({
    message: 'Profile picture deleted successfully',
    user: {
      _id: user._id,
      username: user.username,
      name: user.name,
      email: user.email,
      profile_picture: user.profile_picture
    }
  });
});

// Delete User
const deleteUser = asyncHandler(async(req,res)=>{
    const user = await User.findById(req.params.id);
    if (!user) {
        res.status(404);
        throw new Error('User not found');
    }

    // Delete profile picture if exists
    if (user.profile_picture) {
      const filePath = path.join(__dirname, '..', 'public', user.profile_picture);
      if (fs.existsSync(filePath)) {
        try {
          fs.unlinkSync(filePath);
        } catch (err) {
          console.error('Error deleting profile picture:', err);
        }
      }
    }

    await User.findByIdAndDelete(req.params.id);
    res.json({ message: 'User deleted successfully' });
});

module.exports = {
    getAllUsers,
    getUserById,
    createUser,
    loginUser,
    updateUser,
    uploadProfilePicture,
    deleteProfilePicture,
    deleteUser
}